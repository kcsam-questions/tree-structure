c
q
node.as_paths
c
exit
rspec --format=progress --no-profile tree_spec.rb:17
@name
c
node.as_paths
c
q
node.as_paths
node
c
node.as_paths
q
node.as_paths
n
c
q
node.as_paths
c
q
@name
c
@children[0].name
@children[0]
c
q
node.as_paths
node
c
q
noderspec --format=progress --no-profile tree_spec.rb:127
node
c
as_array
c
node.as_array
q
node
node.values
node
node.as_array
q
node.as_array
q
node.children[2].children
node.children[2]
node.children.map(&:name)
node.children
node
results
resutls
node.as_array
q
node.as_array
c
node.as_array
q
node.as_array
q
node.as_array
q
node.as_array
q
node
q
node.children.count
node.children
q
node.children.count
node.children
node
n
self.name
self
files.map(&:name)
c
files.map(&:name)
files
c
files
c
files
c
files
c
files
c
files
c
files[0].name
c
files[0].name
c
files[0].name
c
files[0].name
files.count
c
files.count
files
c
files
files.count
c
files.count
files
c
files.count
files
q
node.children[0][2]
node.children[0][1]
node.children[0][0]
node.children[0].second
node.children[0].first
node.children[0]
node.children.count
node.children
q
node.children.first[0].name
node.children.first[0]
node.children.first.name
node.children.first
node.children
node.children.count
node.children
node.chidlren
node
q
ancial_pels"=>["LN3002.pdf", "LN3003.pdf", "LN3010.pdf", "LN6010.pdf"]}
q
tree_structure
c
tree_structure
c
tree_structure
c
q
c
n
[tree_structure.values].flatten
[tree_structure.values]
@name
n
tree_structure.first[0]
tree_structure.values
tree_structure
tree_structure.kind_of?(String)
q
node.children.first.name
node.children.first
node.children
node.children.count
node.children
node
q
[tree_structure.values].flatten.count
[tree_structure.values].flatten
[tree_structure.values].count
tree_structure.values.flatten.count
tree_structure.values.flatten
tree_structure.values.count
tree_structure.values
q
node
node.children.count
node.children
node
exit
tree_structure.values[0][2]
tree_structure.values[0]
q
c
tree_structure.values
files
q
n
tree_structure.values[0]
tree_structure.kind_of?(String)
@children
c
node.children.count
node.children
node.tree_structure
node
q
c
tree_structure.values[0]
c
tree_structure.values[0]
c
tree_structure.values[0]
c
tree_structure.values[0]
c
tree_structure.values[0]
c
[tree_structure.values[0]].flatten[0]
[tree_structure.values[0]].flatten
[tree_structure.values[0]]
q
tree_structure.values
tree_structure
[tree_structure.values[0]]
[tree_structure.values[0]].flatten
c
[tree_structure.values[0]].flatten
[tree_structure.values[0]]
q
exit
tree_structure.values[0](1)
tree_structure.values[0][1]
tree_structure.values[0].map { |file| TreeNode.new(file) }
tree_structure.values[0]
c
q
tree_structure.values[0]
tree_structure.values
tree_structure.values.map { |file| TreeNode.new(file) }
tree_structure.values
tree_structure
c
q
tree_structure
tree_structure.values
c
q
c
files
c
n
tree_structure.values
tree_structure
@name
c
n
c
n
q
tree_structure.values
tree_structure
q
@root_file
q
node
tree_structure[@name]
tree_structure
c
@name
tree_structure[key]
tree_structure
c
array.to_s
